/*
 Generated by typeshare 1.7.0
*/

export interface MongoIdObj {
	$oid: string;
}

export type MongoId = MongoIdObj;

export type UserConfig = 
	/** User that logs in with username / password */
	| { type: "Local", data: {
	password: string;
}}
	/** User that logs in via Google Oauth */
	| { type: "Google", data: {
	google_id: string;
	avatar: string;
}}
	/** User that logs in via Github Oauth */
	| { type: "Github", data: {
	github_id: string;
	avatar: string;
}}
	/** Non-human managed user, can have it's own permissions / api keys */
	| { type: "Service", data: {
	description: string;
}};

export type I64 = number;

export type ResourceTarget = 
	| { type: "System", id: string }
	| { type: "Build", id: string }
	| { type: "Builder", id: string }
	| { type: "Deployment", id: string }
	| { type: "Server", id: string }
	| { type: "Repo", id: string }
	| { type: "Alerter", id: string }
	| { type: "Procedure", id: string };

export interface User {
	_id?: MongoId;
	username: string;
	enabled?: boolean;
	admin?: boolean;
	create_server_permissions?: boolean;
	create_build_permissions?: boolean;
	config: UserConfig;
	last_update_view?: I64;
	recently_viewed?: ResourceTarget[];
	updated_at?: I64;
}

export type GetUserResponse = User;

export enum SeverityLevel {
	Ok = "OK",
	Warning = "WARNING",
	Critical = "CRITICAL",
}

export type AlertData = 
	| { type: "ServerUnreachable", data: {
	/** The id of the server */
	id: string;
	/** The name of the server */
	name: string;
	/** The region of the server */
	region?: string;
	/** The error data */
	err?: _Serror;
}}
	| { type: "ServerCpu", data: {
	/** The id of the server */
	id: string;
	/** The name of the server */
	name: string;
	/** The region of the server */
	region?: string;
	/** The cpu usage percentage */
	percentage: number;
}}
	| { type: "ServerMem", data: {
	/** The id of the server */
	id: string;
	/** The name of the server */
	name: string;
	/** The region of the server */
	region?: string;
	/** The used memory */
	used_gb: number;
	/** The total memory */
	total_gb: number;
}}
	| { type: "ServerDisk", data: {
	/** The id of the server */
	id: string;
	/** The name of the server */
	name: string;
	/** The region of the server */
	region?: string;
	/** The mount path of the disk */
	path: string;
	/** The used portion of the disk in GB */
	used_gb: number;
	/** The total size of the disk in GB */
	total_gb: number;
}}
	| { type: "ContainerStateChange", data: {
	/** The id of the deployment */
	id: string;
	/** The name of the deployment */
	name: string;
	/** The server id of server deployment is on */
	server_id: string;
	/** The server name */
	server_name: string;
	/** The previous container state */
	from: DockerContainerState;
	/** The current container state */
	to: DockerContainerState;
}}
	| { type: "AwsBuilderTerminationFailed", data: {
	/** The id of the aws instance which failed to terminate */
	instance_id: string;
}}
	| { type: "None", data: {
}};

export interface Alert {
	/** The mongo id */
	_id?: MongoId;
	/** Unix timestamp in milliseconds the alert was opened */
	ts: I64;
	/** Whether the alert is already resolved */
	resolved: boolean;
	/** The severity of the alert */
	level: SeverityLevel;
	/** The target of the alert */
	target: ResourceTarget;
	/** The type of alert, eg ServerUnreachable, ServerMem, ContainerStateChange */
	variant: AlertData["type"];
	/** The data attached to the alert */
	data: AlertData;
	/** The timestamp of alert resolution */
	resolved_ts?: I64;
}

export type GetAlertResponse = Alert;

export interface Resource<Config, Info> {
	_id?: MongoId;
	name: string;
	description?: string;
	updated_at?: I64;
	/** Tag Ids */
	tags?: string[];
	info?: Info;
	config: Config;
}

export type AlerterConfig = 
	| { type: "Custom", params: CustomAlerterConfig }
	| { type: "Slack", params: SlackAlerterConfig };

export interface AlerterInfo {
	is_default?: boolean;
}

export type Alerter = Resource<AlerterConfig, AlerterInfo>;

export type GetAlerterResponse = Alerter;

export interface ResourceListItem<Info> {
	id: string;
	type: ResourceTarget["type"];
	name: string;
	created_at: I64;
	/** Tag Ids */
	tags: string[];
	info: Info;
}

export interface AlerterListItemInfo {
	/** Whether alerter is enabled for sending alerts */
	enabled: boolean;
	/** Whether the alerter is the default */
	is_default: boolean;
	/** The type of the alerter, eg. Slack, Custom */
	alerter_type: string;
}

export type AlerterListItem = ResourceListItem<AlerterListItemInfo>;

export type ListAlertersResponse = AlerterListItem[];

export interface Version {
	major: number;
	minor: number;
	patch: number;
}

export interface SystemCommand {
	path?: string;
	command?: string;
}

export interface EnvironmentVar {
	variable: string;
	value: string;
}

export interface BuildConfig {
	/** Which builder is used to build the image. */
	builder_id?: string;
	/** Whether to skip secret interpolation in the build_args. */
	skip_secret_interp?: boolean;
	/** The current version of the build. */
	version?: Version;
	/** The Github repo used as the source of the build. */
	repo?: string;
	/** The branch of the repo. */
	branch: string;
	/**
	 * The github account used to clone (used to access private repos).
	 * Empty string is public clone (only public repos).
	 */
	github_account?: string;
	/**
	 * The dockerhub account used to push the image to dockerhub.
	 * Empty string means no dockerhub push (server local build).
	 */
	docker_account?: string;
	/**
	 * The docker organization which the image should be pushed under.
	 * Empty string means no organization.
	 */
	docker_organization?: string;
	/** The optional command run after repo clone and before docker build. */
	pre_build?: SystemCommand;
	/**
	 * The path of the docker build context relative to the root of the repo.
	 * Default: "." (the root of the repo).
	 */
	build_path: string;
	/** The path of the dockerfile relative to the build path. */
	dockerfile_path: string;
	/** Docker build arguments */
	build_args?: EnvironmentVar[];
	/** Docker labels */
	labels?: EnvironmentVar[];
	/** Any extra docker cli arguments to be included in the build command */
	extra_args?: string[];
	/** Whether to use buildx to build (eg `docker buildx build ...`) */
	use_buildx?: boolean;
}

export interface BuildInfo {
	last_built_at: I64;
}

export type Build = Resource<BuildConfig, BuildInfo>;

export type GetBuildResponse = Build;

export interface BuildListItemInfo {
	/** Unix timestamp in milliseconds of last build */
	last_built_at: I64;
	/** The current version of the build */
	version: Version;
	/** The Github repo used as the source of the build */
	repo: string;
	/** The branch of the repo */
	branch: string;
}

export type BuildListItem = ResourceListItem<BuildListItemInfo>;

export type ListBuildsResponse = BuildListItem[];

export interface BuildActionState {
	building: boolean;
	updating: boolean;
}

export type GetBuildActionStateResponse = BuildActionState;

export interface BuildVersionResponseItem {
	version: Version;
	ts: I64;
}

export type GetBuildVersionsResponse = BuildVersionResponseItem[];

export type ListDockerOrganizationsResponse = string[];

export type BuilderConfig = 
	| { type: "Server", params: ServerBuilderConfig }
	| { type: "Aws", params: AwsBuilderConfig };

export type Builder = Resource<BuilderConfig, undefined>;

export type GetBuilderResponse = Builder;

export interface BuilderListItemInfo {
	provider: string;
	instance_type?: string;
}

export type BuilderListItem = ResourceListItem<BuilderListItemInfo>;

export type ListBuildersResponse = BuilderListItem[];

export type DeploymentImage = 
	| { type: "Image", params: {
	/** The docker image, can be from any registry that works with docker and that the host server can reach. */
	image?: string;
}}
	| { type: "Build", params: {
	/** The id of the build */
	build_id?: string;
	/**
	 * Use a custom / older version of the image produced by the build.
	 * if version is 0.0.0, this means `latest` image.
	 */
	version?: Version;
}};

export enum TerminationSignal {
	SigHup = "SIGHUP",
	SigInt = "SIGINT",
	SigQuit = "SIGQUIT",
	SigTerm = "SIGTERM",
}

export interface TerminationSignalLabel {
	signal: TerminationSignal;
	label: string;
}

export interface Conversion {
	local: string;
	container: string;
}

export enum RestartMode {
	NoRestart = "no",
	OnFailure = "on-failure",
	Always = "always",
	UnlessStopped = "unless-stopped",
}

export interface DeploymentConfig {
	/** The id of server the deployment is deployed on. */
	server_id?: string;
	/** Whether to send ContainerStateChange alerts for this deployment */
	send_alerts: boolean;
	/**
	 * The image which the deployment deploys.
	 * Can either be a user inputted image, or a Monitor build.
	 */
	image?: DeploymentImage;
	/** Whether to skip secret interpolation into the deployment environment variables. */
	skip_secret_interp?: boolean;
	/** Whether to redeploy the deployment whenever the attached build finishes. */
	redeploy_on_build?: boolean;
	/**
	 * Labels attached to various termination signal options.
	 * Used to specify different shutdown functionality depending on the termination signal.
	 */
	term_signal_labels: TerminationSignalLabel[];
	/** The default termination signal to use to stop the deployment. Defaults to SigTerm (default docker signal). */
	termination_signal?: TerminationSignal;
	/** The termination timeout. */
	termination_timeout: number;
	/**
	 * The container port mapping.
	 * Irrelevant if container network is `host`.
	 * Maps ports on host to ports on container.
	 */
	ports?: Conversion[];
	/**
	 * The container volume mapping.
	 * Maps files / folders on host to files / folders in container.
	 */
	volumes?: Conversion[];
	/** The environment variables passed to the container. */
	environment?: EnvironmentVar[];
	/** The docker labels given to the container. */
	labels?: EnvironmentVar[];
	/**
	 * The network attached to the container.
	 * Default is `host`.
	 */
	network: string;
	/** The restart mode given to the container. */
	restart?: RestartMode;
	/**
	 * This is interpolated at the end of the `docker run` command,
	 * which means they are either passed to the containers inner process,
	 * or replaces the container command, depending on use of ENTRYPOINT or CMD in dockerfile.
	 * Empty is no process args.
	 */
	process_args?: string;
	/** The user of the container, or empty string to use the default image user. */
	container_user?: string;
	/**
	 * Extra args which are interpolated into the `docker run` command,
	 * and affect the container configuration.
	 */
	extra_args?: string[];
	/**
	 * The docker account the deployment should use to pull the image.
	 * - If using a custom image, empty string means don't use an account. Only works for public images.
	 * - If using a monitor build, empty string means to use the same docker account as the build uses.
	 */
	docker_account?: string;
}

export type Deployment = Resource<DeploymentConfig, undefined>;

export type GetDeploymentResponse = Deployment;

export enum DockerContainerState {
	Unknown = "unknown",
	NotDeployed = "not_deployed",
	Created = "created",
	Restarting = "restarting",
	Running = "running",
	Removing = "removing",
	Paused = "paused",
	Exited = "exited",
	Dead = "dead",
}

export interface DeploymentListItemInfo {
	state: DockerContainerState;
	status?: string;
	image: string;
	server_id: string;
	build_id?: string;
}

export type DeploymentListItem = ResourceListItem<DeploymentListItemInfo>;

export type ListDeploymentsResponse = DeploymentListItem[];

export interface Log {
	stage: string;
	command: string;
	stdout: string;
	stderr: string;
	success: boolean;
	start_ts: I64;
	end_ts: I64;
}

export type GetLogResponse = Log;

export type SearchLogResponse = Log;

export interface DockerContainerStats {
	name: string;
	cpu_perc: string;
	mem_perc: string;
	mem_usage: string;
	net_io: string;
	block_io: string;
	pids: string;
}

export type GetDeploymentStatsResponse = DockerContainerStats;

export interface DeploymentActionState {
	deploying: boolean;
	stopping: boolean;
	starting: boolean;
	removing: boolean;
	updating: boolean;
	renaming: boolean;
	deleting: boolean;
}

export type GetDeploymentActionStateResponse = DeploymentActionState;

export interface ApiKey {
	/** Unique key associated with secret */
	key: string;
	/** Hash of the secret */
	secret: string;
	/** User associated with the api key */
	user_id: string;
	/** Name associated with the api key for management */
	name: string;
	/** Timestamp of key creation */
	created_at: I64;
	/** Expiry of key, or 0 if never expires */
	expires: I64;
}

export type ListApiKeysResponse = ApiKey[];

export type GetUsersResponse = User[];

export enum PermissionLevel {
	/** No permissions. */
	None = "None",
	/** Can see the rousource */
	Read = "Read",
	/** Can execute actions on the resource */
	Execute = "Execute",
	/** Can update the resource configuration */
	Write = "Write",
}

export interface Permission {
	/** The id of the permission document */
	_id?: MongoId;
	/** Attached user */
	user_id: string;
	/** The target resource */
	target: ResourceTarget;
	/** The permission level */
	level?: PermissionLevel;
}

export type ListUserPermissionsResponse = Permission[];

export enum ProcedureType {
	Sequence = "Sequence",
	Parallel = "Parallel",
}

export type Execution = 
	/** For new executions upon instantiation */
	| { type: "None", params: None }
	| { type: "RunProcedure", params: RunProcedure }
	| { type: "RunBuild", params: RunBuild }
	| { type: "Deploy", params: Deploy }
	| { type: "StartContainer", params: StartContainer }
	| { type: "StopContainer", params: StopContainer }
	| { type: "StopAllContainers", params: StopAllContainers }
	| { type: "RemoveContainer", params: RemoveContainer }
	| { type: "CloneRepo", params: CloneRepo }
	| { type: "PullRepo", params: PullRepo }
	| { type: "PruneDockerNetworks", params: PruneDockerNetworks }
	| { type: "PruneDockerImages", params: PruneDockerImages }
	| { type: "PruneDockerContainers", params: PruneDockerContainers };

/** Allows to enable / disabled procedures in the sequence / parallel vec on the fly */
export interface EnabledExecution {
	/** The execution request to run. */
	execution: Execution;
	/** Whether the execution is enabled to run in the procedure. */
	enabled: boolean;
}

export interface ProcedureConfig {
	procedure_type?: ProcedureType;
	executions?: EnabledExecution[];
}

export type Procedure = Resource<ProcedureConfig, undefined>;

export type GetProcedureResponse = Procedure;

export interface ProcedureListItemInfo {
	procedure_type: ProcedureType;
}

export type ProcedureListItem = ResourceListItem<ProcedureListItemInfo>;

export type ListProceduresResponse = ProcedureListItem[];

export interface ProcedureActionState {
	running: boolean;
}

export type GetProcedureActionStateResponse = ProcedureActionState;

export interface RepoConfig {
	server_id?: string;
	repo?: string;
	branch: string;
	github_account?: string;
	on_clone?: SystemCommand;
	on_pull?: SystemCommand;
}

export interface RepoInfo {
	last_pulled_at: I64;
}

export type Repo = Resource<RepoConfig, RepoInfo>;

export type GetRepoResponse = Repo;

export interface RepoListItemInfo {
	last_pulled_at: I64;
	repo: string;
	branch: string;
}

export type RepoListItem = ResourceListItem<RepoListItemInfo>;

export type ListReposResponse = RepoListItem[];

export interface RepoActionState {
	cloning: boolean;
	pulling: boolean;
	updating: boolean;
	deleting: boolean;
}

export type GetRepoActionStateResponse = RepoActionState;

export interface ServerConfig {
	/**
	 * The http address of the periphery client.
	 * Example: http://localhost:8120
	 */
	address: string;
	/**
	 * Whether a server is enabled.
	 * If a server is disabled,
	 * you won't be able to perform any actions on it or see deployment's status.
	 * default: true
	 */
	enabled: boolean;
	/**
	 * Whether to monitor any server stats beyond passing health check.
	 * default: true
	 */
	stats_monitoring: boolean;
	/**
	 * Whether to trigger 'docker image prune -a -f' every 24 hours.
	 * default: true
	 */
	auto_prune: boolean;
	/** Whether to send alerts about the servers reachability */
	send_unreachable_alerts: boolean;
	/** Whether to send alerts about the servers CPU status */
	send_cpu_alerts: boolean;
	/** Whether to send alerts about the servers MEM status */
	send_mem_alerts: boolean;
	/** Whether to send alerts about the servers DISK status */
	send_disk_alerts: boolean;
	/** An optional region label */
	region?: string;
	/** The percentage threshhold which triggers WARNING state for CPU. */
	cpu_warning: number;
	/** The percentage threshhold which triggers CRITICAL state for CPU. */
	cpu_critical: number;
	/** The percentage threshhold which triggers WARNING state for MEM. */
	mem_warning: number;
	/** The percentage threshhold which triggers CRITICAL state for MEM. */
	mem_critical: number;
	/** The percentage threshhold which triggers WARNING state for DISK. */
	disk_warning: number;
	/** The percentage threshhold which triggers CRITICAL state for DISK. */
	disk_critical: number;
}

export type Server = Resource<ServerConfig, undefined>;

export type GetServerResponse = Server;

export enum ServerStatus {
	NotOk = "NotOk",
	Ok = "Ok",
	Disabled = "Disabled",
}

export interface ServerListItemInfo {
	status: ServerStatus;
	region: string;
	send_unreachable_alerts: boolean;
	send_cpu_alerts: boolean;
	send_mem_alerts: boolean;
	send_disk_alerts: boolean;
}

export type ServerListItem = ResourceListItem<ServerListItemInfo>;

export type ListServersResponse = ServerListItem[];

export interface ServerActionState {
	pruning_networks: boolean;
	pruning_containers: boolean;
	pruning_images: boolean;
	stopping_containers: boolean;
}

export type GetServerActionStateResponse = ServerActionState;

export interface IpamConfig {
	Subnet?: string;
	IPRange?: string;
	Gateway?: string;
	AuxiliaryAddresses?: Record<string, string>;
}

export interface Ipam {
	/** Name of the IPAM driver to use. */
	Driver?: string;
	/** List of IPAM configuration options, specified as a map:  ``` {\"Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\": <device_name:IP address>} ``` */
	Config?: IpamConfig[];
	/** Driver-specific options, specified as a map. */
	Options?: Record<string, string>;
}

export interface NetworkContainer {
	Name?: string;
	EndpointID?: string;
	MacAddress?: string;
	IPv4Address?: string;
	IPv6Address?: string;
}

export interface DockerNetwork {
	/** The name of the docker network */
	Name?: string;
	/** The Id of the docker network */
	Id?: string;
	/** Timestamp network created */
	Created?: string;
	Scope?: string;
	Driver?: string;
	EnableIPv6?: boolean;
	IPAM?: Ipam;
	Internal?: boolean;
	Attachable?: boolean;
	Ingress?: boolean;
	Containers?: Record<string, NetworkContainer>;
	Options?: Record<string, string>;
	Labels?: Record<string, string>;
}

export type GetDockerNetworksResponse = DockerNetwork[];

/** Summary of docker image cached on a server */
export interface ImageSummary {
	/** ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image's configuration (which includes the digests of layers used by the image).  Note that this digest differs from the `RepoDigests` below, which holds digests of image manifests that reference the image. */
	Id: string;
	/** ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry. */
	ParentId: string;
	/** List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \"untagged\", in which case it can still be referenced by its ID. */
	RepoTags: string[];
	/** List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated. */
	RepoDigests: string[];
	/** Date and time at which the image was created as a Unix timestamp (number of seconds sinds EPOCH). */
	Created: I64;
	/** Total size of the image including all layers it is composed of. */
	Size: I64;
	/** Total size of image layers that are shared between this image and other images.  This size is not calculated by default. `-1` indicates that the value has not been set / calculated. */
	SharedSize: I64;
	/** Total size of the image including all layers it is composed of.  In versions of Docker before v1.10, this field was calculated from the image itself and all of its parent images. Docker v1.10 and up store images self-contained, and no longer use a parent-chain, making this field an equivalent of the Size field.  This field is kept for backward compatibility, but may be removed in a future version of the API. */
	VirtualSize?: I64;
	/** User-defined key/value metadata. */
	Labels: Record<string, string>;
	/** Number of containers using this image. Includes both stopped and running containers.  This size is not calculated by default, and depends on which API endpoint is used. `-1` indicates that the value has not been set / calculated. */
	Containers: I64;
}

export type GetDockerImagesResponse = ImageSummary[];

export interface ContainerSummary {
	/** Name of the container. */
	name: string;
	/** Id of the container. */
	id: string;
	/** The image the container is based on. */
	image: string;
	/** The docker labels on the container. */
	labels: Record<string, string>;
	/** The state of the container, like `running` or `not_deployed` */
	state: DockerContainerState;
	/** The status string of the docker container. */
	status?: string;
}

export type GetDockerContainersResponse = ContainerSummary[];

export interface SystemInformation {
	name?: string;
	os?: string;
	kernel?: string;
	core_count?: number;
	host_name?: string;
	cpu_brand: string;
}

export type GetSystemInformationResponse = SystemInformation;

export interface SingleDiskUsage {
	/** The mount point of the disk */
	mount: string;
	/** Used portion of the disk in GB */
	used_gb: number;
	/** Total size of the disk in GB */
	total_gb: number;
}

export enum Timelength {
	OneSecond = "1-sec",
	FiveSeconds = "5-sec",
	TenSeconds = "10-sec",
	FifteenSeconds = "15-sec",
	ThirtySeconds = "30-sec",
	OneMinute = "1-min",
	TwoMinutes = "2-min",
	FiveMinutes = "5-min",
	TenMinutes = "10-min",
	FifteenMinutes = "15-min",
	ThirtyMinutes = "30-min",
	OneHour = "1-hr",
	TwoHours = "2-hr",
	SixHours = "6-hr",
	EightHours = "8-hr",
	TwelveHours = "12-hr",
	OneDay = "1-day",
	ThreeDay = "3-day",
	OneWeek = "1-wk",
	TwoWeeks = "2-wk",
	ThirtyDays = "30-day",
}

export interface SystemStats {
	/** Cpu usage percentage */
	cpu_perc: number;
	/** Memory used in GB */
	mem_used_gb: number;
	/** Total memory in GB */
	mem_total_gb: number;
	/** Breakdown of individual disks, ie their usages, sizes, and mount points */
	disks: SingleDiskUsage[];
	/** The rate the system stats are being polled from the system */
	polling_rate: Timelength;
	/** Unix timestamp in milliseconds when stats were last polled */
	refresh_ts: I64;
	/** Unix timestamp in milliseconds when disk list was last refreshed */
	refresh_list_ts: I64;
}

export type GetSystemStatsResponse = SystemStats;

export interface SystemProcess {
	/** The process PID */
	pid: number;
	/** The process name */
	name: string;
	/** The path to the process executable */
	exe?: string;
	/** The command used to start the process */
	cmd: string[];
	/** The time the process was started */
	start_time?: number;
	/**
	 * The cpu usage percentage of the process.
	 * This is in core-percentage, eg 100% is 1 full core, and
	 * an 8 core machine would max at 800%.
	 */
	cpu_perc: number;
	/** The memory usage of the process in MB */
	mem_mb: number;
	/** Process disk read in KB/s */
	disk_read_kb: number;
	/** Process disk write in KB/s */
	disk_write_kb: number;
}

export type GetSystemProcessesResponse = SystemProcess[];

export type GetAvailableSecretsResponse = string[];

export interface Tag {
	_id?: MongoId;
	name: string;
	owner?: string;
}

export type GetTagResponse = Tag;

export type ListTagsResponse = Tag[];

export enum Operation {
	None = "None",
	LaunchServer = "LaunchServer",
	CreateServer = "CreateServer",
	UpdateServer = "UpdateServer",
	DeleteServer = "DeleteServer",
	RenameServer = "RenameServer",
	PruneImagesServer = "PruneImagesServer",
	PruneContainersServer = "PruneContainersServer",
	PruneNetworksServer = "PruneNetworksServer",
	CreateNetwork = "CreateNetwork",
	DeleteNetwork = "DeleteNetwork",
	CreateBuild = "CreateBuild",
	UpdateBuild = "UpdateBuild",
	DeleteBuild = "DeleteBuild",
	RunBuild = "RunBuild",
	CancelBuild = "CancelBuild",
	CreateBuilder = "CreateBuilder",
	UpdateBuilder = "UpdateBuilder",
	DeleteBuilder = "DeleteBuilder",
	CreateDeployment = "CreateDeployment",
	UpdateDeployment = "UpdateDeployment",
	DeleteDeployment = "DeleteDeployment",
	DeployContainer = "DeployContainer",
	StopContainer = "StopContainer",
	StopAllContainers = "StopAllContainers",
	StartContainer = "StartContainer",
	RemoveContainer = "RemoveContainer",
	RenameDeployment = "RenameDeployment",
	CreateRepo = "CreateRepo",
	UpdateRepo = "UpdateRepo",
	DeleteRepo = "DeleteRepo",
	CloneRepo = "CloneRepo",
	PullRepo = "PullRepo",
	CreateAlerter = "CreateAlerter",
	UpdateAlerter = "UpdateAlerter",
	DeleteAlerter = "DeleteAlerter",
	CreateProcedure = "CreateProcedure",
	UpdateProcedure = "UpdateProcedure",
	DeleteProcedure = "DeleteProcedure",
	RunProcedure = "RunProcedure",
	UpdateUserPermissions = "UpdateUserPermissions",
	UpdateUserPermissionsOnTarget = "UpdateUserPermissionsOnTarget",
}

export enum UpdateStatus {
	Queued = "Queued",
	InProgress = "InProgress",
	Complete = "Complete",
}

export interface Update {
	_id?: MongoId;
	operation: Operation;
	start_ts: I64;
	success: boolean;
	operator: string;
	target: ResourceTarget;
	logs: Log[];
	end_ts?: I64;
	status: UpdateStatus;
	version: Version;
}

export type GetUpdateResponse = Update;

export interface CreateApiKeyResponse {
	/** X-API-KEY */
	key: string;
	/**
	 * X-API-SECRET
	 * There is no way to get the secret again after it is distributed in this message
	 */
	secret: string;
}

export type CreateApiKeyForServiceUserResponse = CreateApiKeyResponse;

export type CreateProcedureResponse = Procedure;

export type CopyProcedureResponse = Procedure;

export type DeleteProcedureResponse = Procedure;

export type UpdateProcedureResponse = Procedure;

export type CreateServiceUserResponse = User;

export type UpdateServiceUserDescriptionResponse = User;

export type _PartialCustomAlerterConfig = Partial<CustomAlerterConfig>;

export type _PartialSlackAlerterConfig = Partial<SlackAlerterConfig>;

export enum TagBehavior {
	/** Returns resources which have strictly all the tags */
	All = "All",
	/** Returns resources which have one or more of the tags */
	Any = "Any",
}

/** Passing empty Vec is the same as not filtering by that field */
export interface ResourceQuery<T> {
	ids?: string[];
	names?: string[];
	/** Pass Vec of tag ids or tag names */
	tags?: string[];
	tag_behavior?: TagBehavior;
	specific?: T;
}

export interface AlerterQuerySpecifics {
	types: AlerterConfig["type"][];
}

export type AlerterQuery = ResourceQuery<AlerterQuerySpecifics>;

export type _PartialBuildConfig = Partial<BuildConfig>;

export interface BuildQuerySpecifics {
	builder_ids?: string[];
	repos?: string[];
	/**
	 * query for builds last built more recently than this timestamp
	 * defaults to 0 which is a no op
	 */
	built_since?: I64;
}

export type BuildQuery = ResourceQuery<BuildQuerySpecifics>;

export type _PartialBuilderConfig = Partial<BuilderConfig>;

export type _PartialServerBuilderConfig = Partial<ServerBuilderConfig>;

export type _PartialAwsBuilderConfig = Partial<AwsBuilderConfig>;

export interface BuilderQuerySpecifics {
}

export type BuilderQuery = ResourceQuery<BuilderQuerySpecifics>;

export type _PartialDeploymentConfig = Partial<DeploymentConfig>;

export interface DeploymentQuerySpecifics {
	server_ids?: string[];
	build_ids?: string[];
}

export type DeploymentQuery = ResourceQuery<DeploymentQuerySpecifics>;

export type U64 = number;

export type MongoDocument = any;

export interface __Serror {
	error: string;
	trace: string[];
}

export type _Serror = __Serror;

export type _PartialProcedureConfig = Partial<ProcedureConfig>;

export interface ProcedureQuerySpecifics {
	types: ProcedureType[];
}

export type ProcedureQuery = ResourceQuery<ProcedureQuerySpecifics>;

export type _PartialRepoConfig = Partial<RepoConfig>;

export interface RepoQuerySpecifics {
	repos: string[];
}

export type RepoQuery = ResourceQuery<RepoQuerySpecifics>;

export type _PartialServerConfig = Partial<ServerConfig>;

export interface ServerQuerySpecifics {
}

export type ServerQuery = ResourceQuery<ServerQuerySpecifics>;

export type _PartialTag = Partial<Tag>;

export interface GetLoginOptions {
}

export interface GetLoginOptionsResponse {
	local: boolean;
	github: boolean;
	google: boolean;
}

export interface CreateLocalUser {
	username: string;
	password: string;
}

export interface CreateLocalUserResponse {
	jwt: string;
}

export interface LoginLocalUser {
	username: string;
	password: string;
}

export interface LoginLocalUserResponse {
	jwt: string;
}

export interface ExchangeForJwt {
	token: string;
}

export interface ExchangeForJwtResponse {
	jwt: string;
}

export interface GetUser {
}

export interface RunBuild {
	/** Can be id or name */
	build: string;
}

export interface CancelBuild {
	/** Can be id or name */
	build: string;
}

export interface CancelBuildResponse {
}

export interface Deploy {
	/** Name or id */
	deployment: string;
	stop_signal?: TerminationSignal;
	stop_time?: number;
}

export interface StartContainer {
	/** Name or id */
	deployment: string;
}

export interface StopContainer {
	/** Name or id */
	deployment: string;
	signal?: TerminationSignal;
	time?: number;
}

export interface StopAllContainers {
	/** Name or id */
	server: string;
}

export interface RemoveContainer {
	/** Name or id */
	deployment: string;
	signal?: TerminationSignal;
	time?: number;
}

export interface None {
}

export interface RunProcedure {
	/** Id or name */
	procedure: string;
}

export interface CloneRepo {
	/** Id or name */
	repo: string;
}

export interface PullRepo {
	/** Id or name */
	repo: string;
}

export interface PruneDockerNetworks {
	/** Id or name */
	server: string;
}

export interface PruneDockerImages {
	/** Id or name */
	server: string;
}

export interface PruneDockerContainers {
	/** Id or name */
	server: string;
}

export interface ListAlerts {
	query?: MongoDocument;
	page?: U64;
}

export interface ListAlertsResponse {
	alerts: Alert[];
	next_page?: I64;
}

export interface GetAlert {
	id: string;
}

export interface GetAlerter {
	/** Id or name */
	alerter: string;
}

export interface ListAlerters {
	query?: AlerterQuery;
}

export interface GetAlertersSummary {
}

export interface GetAlertersSummaryResponse {
	total: number;
}

export interface GetBuild {
	/** Id or name */
	build: string;
}

export interface ListBuilds {
	query?: BuildQuery;
}

export interface GetBuildActionState {
	/** Id or name */
	build: string;
}

export interface GetBuildsSummary {
}

export interface GetBuildsSummaryResponse {
	total: number;
}

export interface GetBuildMonthlyStats {
	page?: number;
}

export interface BuildStatsDay {
	time: number;
	count: number;
	ts: number;
}

export interface GetBuildMonthlyStatsResponse {
	total_time: number;
	total_count: number;
	days: BuildStatsDay[];
}

export interface GetBuildVersions {
	/** Id or name */
	build: string;
	page?: number;
	major?: number;
	minor?: number;
	patch?: number;
}

export interface ListDockerOrganizations {
}

export interface GetBuilder {
	/** Id or name */
	builder: string;
}

export interface ListBuilders {
	query?: BuilderQuery;
}

export interface GetBuildersSummary {
}

export interface GetBuildersSummaryResponse {
	total: number;
}

export interface GetBuilderAvailableAccounts {
	/** Id or name */
	builder: string;
}

export interface GetBuilderAvailableAccountsResponse {
	github: string[];
	docker: string[];
}

export interface GetDeployment {
	/** Id or name */
	deployment: string;
}

export interface ListDeployments {
	query?: DeploymentQuery;
}

export interface GetDeploymentStatus {
	/** Id or name */
	deployment: string;
}

export interface GetDeploymentStatusResponse {
	state: DockerContainerState;
	status?: string;
}

export interface GetLog {
	/** Id or name */
	deployment: string;
	tail: U64;
}

export enum SearchCombinator {
	Or = "Or",
	And = "And",
}

export interface SearchLog {
	/** Id or name */
	deployment: string;
	terms: string[];
	combinator?: SearchCombinator;
}

export interface GetDeployedVersion {
	/** Id or name */
	deployment: string;
}

export interface GetDeployedVersionResponse {
	version: string;
}

export interface GetDeploymentStats {
	/** Id or name */
	deployment: string;
}

export interface GetDeploymentActionState {
	/** Id or name */
	deployment: string;
}

export interface GetDeploymentsSummary {
}

export interface GetDeploymentsSummaryResponse {
	total: I64;
	running: I64;
	stopped: I64;
	not_deployed: I64;
	unknown: I64;
}

export interface GetVersion {
}

export interface GetVersionResponse {
	version: string;
}

export interface ListApiKeys {
}

export interface GetUsers {
}

export interface GetUsername {
	user_id: string;
}

export interface GetUsernameResponse {
	username: string;
}

export interface GetCoreInfo {
}

export interface GetCoreInfoResponse {
	title: string;
	monitoring_interval: Timelength;
	github_webhook_base_url: string;
}

export interface ListUserPermissions {
	user_id: string;
}

export interface GetProcedure {
	/** Id or name */
	procedure: string;
}

export interface ListProcedures {
	query?: ProcedureQuery;
}

export interface GetProceduresSummary {
}

export interface GetProceduresSummaryResponse {
	total: number;
}

export interface GetProcedureActionState {
	/** Id or name */
	procedure: string;
}

export interface GetRepo {
	/** Id or name */
	repo: string;
}

export interface ListRepos {
	query?: RepoQuery;
}

export interface GetRepoActionState {
	/** Id or name */
	repo: string;
}

export interface GetReposSummary {
}

export interface GetReposSummaryResponse {
	total: number;
}

export interface FindResources {
	query?: MongoDocument;
	resources?: ResourceTarget["type"][];
}

export interface FindResourcesResponse {
	servers: ServerListItem[];
	deployments: DeploymentListItem[];
	builds: BuildListItem[];
	repos: RepoListItem[];
	procedures: ProcedureListItem[];
}

export interface GetServer {
	/** Id or name */
	server: string;
}

export interface ListServers {
	query?: ServerQuery;
}

export interface GetServerStatus {
	/** Id or name */
	server: string;
}

export interface GetServerStatusResponse {
	status: ServerStatus;
}

export interface GetServerActionState {
	/** Id or name */
	server: string;
}

export interface GetPeripheryVersion {
	/** Id or name */
	server: string;
}

export interface GetPeripheryVersionResponse {
	version: string;
}

export interface GetDockerNetworks {
	/** Id or name */
	server: string;
}

export interface GetDockerImages {
	/** Id or name */
	server: string;
}

export interface GetDockerContainers {
	/** Id or name */
	server: string;
}

export interface GetSystemInformation {
	/** Id or name */
	server: string;
}

export interface GetSystemStats {
	/** Id or name */
	server: string;
}

export interface GetSystemProcesses {
	/** Id or name */
	server: string;
}

export interface GetHistoricalServerStats {
	/** Id or name */
	server: string;
	interval: Timelength;
	page?: number;
}

export interface SystemStatsRecord {
	/** Unix timestamp in milliseconds */
	ts: I64;
	/** Server id */
	sid: string;
	/** Cpu usage percentage */
	cpu_perc: number;
	/** Memory used in GB */
	mem_used_gb: number;
	/** Total memory in GB */
	mem_total_gb: number;
	/** Disk used in GB */
	disk_used_gb: number;
	/** Total disk size in GB */
	disk_total_gb: number;
	/** Breakdown of individual disks, ie their usages, sizes, and mount points */
	disks: SingleDiskUsage[];
}

export interface GetHistoricalServerStatsResponse {
	stats: SystemStatsRecord[];
	next_page?: number;
}

export interface GetServersSummary {
}

export interface GetServersSummaryResponse {
	total: I64;
	healthy: I64;
	unhealthy: I64;
	disabled: I64;
}

export interface GetAvailableAccounts {
	/** Id or name */
	server: string;
}

export interface GetAvailableAccountsResponse {
	github: string[];
	docker: string[];
}

export interface GetAvailableSecrets {
	/** Id or name */
	server: string;
}

export interface GetTag {
	/** Id or name */
	tag: string;
}

export interface ListTags {
	query?: MongoDocument;
}

export interface GetUpdate {
	id: string;
}

export interface ListUpdates {
	query?: MongoDocument;
	page?: number;
}

export interface UpdateListItem {
	id: string;
	operation: Operation;
	start_ts: I64;
	success: boolean;
	username: string;
	operator: string;
	target: ResourceTarget;
	status: UpdateStatus;
	version: Version;
}

export interface ListUpdatesResponse {
	updates: UpdateListItem[];
	next_page?: number;
}

export type PartialAlerterConfig = 
	| { type: "Custom", params: _PartialCustomAlerterConfig }
	| { type: "Slack", params: _PartialSlackAlerterConfig };

export interface CreateAlerter {
	name: string;
	config: PartialAlerterConfig;
}

export interface CopyAlerter {
	name: string;
	id: string;
}

export interface DeleteAlerter {
	id: string;
}

export interface UpdateAlerter {
	id: string;
	config: PartialAlerterConfig;
}

export interface CreateApiKey {
	name: string;
	expires?: I64;
}

export interface DeleteApiKey {
	key: string;
}

export interface DeleteApiKeyResponse {
}

/** ADMIN ONLY */
export interface CreateApiKeyForServiceUser {
	/** Must be service user */
	user_id: string;
	name: string;
	expires?: I64;
}

/** ADMIN ONLY */
export interface DeleteApiKeyForServiceUser {
	key: string;
}

export interface DeleteApiKeyForServiceUserResponse {
}

export interface CreateBuild {
	name: string;
	config: _PartialBuildConfig;
}

export interface CopyBuild {
	name: string;
	id: string;
}

export interface DeleteBuild {
	id: string;
}

export interface UpdateBuild {
	id: string;
	config: _PartialBuildConfig;
}

export type PartialBuilderConfig = 
	| { type: "Server", params: _PartialServerBuilderConfig }
	| { type: "Aws", params: _PartialAwsBuilderConfig };

export interface CreateBuilder {
	name: string;
	config: PartialBuilderConfig;
}

export interface CopyBuilder {
	name: string;
	id: string;
}

export interface DeleteBuilder {
	id: string;
}

export interface UpdateBuilder {
	id: string;
	config: PartialBuilderConfig;
}

export interface CreateDeployment {
	name: string;
	config: _PartialDeploymentConfig;
}

export interface CopyDeployment {
	name: string;
	id: string;
}

export interface DeleteDeployment {
	id: string;
}

export interface UpdateDeployment {
	id: string;
	config: _PartialDeploymentConfig;
}

export interface RenameDeployment {
	id: string;
	name: string;
}

export interface UpdateDescription {
	target: ResourceTarget;
	description: string;
}

export interface UpdateDescriptionResponse {
}

export type LaunchServerConfig = 
	| { type: "Aws", params: LaunchAwsServerConfig };

export interface LaunchServer {
	name: string;
	config: LaunchServerConfig;
}

export interface AwsVolume {
	device_name: string;
	size_gb: number;
	volume_type?: string;
	iops?: number;
	throughput?: number;
}

export interface LaunchAwsServerConfig {
	region: string;
	instance_type: string;
	volumes: AwsVolume[];
	ami_id: string;
	subnet_id: string;
	security_group_ids: string[];
	key_pair_name: string;
	assign_public_ip: boolean;
	use_public_ip: boolean;
}

export interface UpdateUserPermissionsOnTarget {
	user_id: string;
	permission: PermissionLevel;
	target: ResourceTarget;
}

export interface UpdateUserPermissions {
	user_id: string;
	enabled?: boolean;
	create_servers?: boolean;
	create_builds?: boolean;
}

export interface CreateProcedure {
	name: string;
	config: _PartialProcedureConfig;
}

export interface CopyProcedure {
	name: string;
	id: string;
}

export interface DeleteProcedure {
	id: string;
}

export interface UpdateProcedure {
	id: string;
	config: _PartialProcedureConfig;
}

export interface CreateRepo {
	name: string;
	config: _PartialRepoConfig;
}

export interface CopyRepo {
	name: string;
	id: string;
}

export interface DeleteRepo {
	id: string;
}

export interface UpdateRepo {
	id: string;
	config: _PartialRepoConfig;
}

export interface CreateServer {
	name: string;
	config: _PartialServerConfig;
}

export interface DeleteServer {
	id: string;
}

export interface UpdateServer {
	id: string;
	config: _PartialServerConfig;
}

export interface RenameServer {
	id: string;
	name: string;
}

export interface CreateNetwork {
	server_id: string;
	name: string;
}

export interface DeleteNetwork {
	server_id: string;
	name: string;
}

export interface CreateTag {
	name: string;
}

export interface DeleteTag {
	id: string;
}

export interface RenameTag {
	id: string;
	name: string;
}

export interface UpdateTagsOnResource {
	target: ResourceTarget;
	/** Tag Ids */
	tags: string[];
}

export interface UpdateTagsOnResourceResponse {
}

export interface PushRecentlyViewed {
	resource: ResourceTarget;
}

export interface PushRecentlyViewedResponse {
}

export interface SetLastSeenUpdate {
}

export interface SetLastSeenUpdateResponse {
}

/** ADMIN ONLY */
export interface CreateServiceUser {
	username: string;
	description: string;
}

/** ADMIN ONLY */
export interface UpdateServiceUserDescription {
	username: string;
	description: string;
}

export interface CustomAlerterConfig {
	/** The http/s endpoint to send the POST to */
	url: string;
	/** Whether the alerter is enabled */
	enabled?: boolean;
}

export interface SlackAlerterConfig {
	/** The slack app url */
	url: string;
	/** Whether the alerter is enabled */
	enabled?: boolean;
}

export interface ServerBuilderConfig {
	/** The server id of the builder */
	server_id: string;
}

export interface AwsBuilderConfig {
	/** The AWS region to create the instance in */
	region: string;
	/** The instance type to create for the build */
	instance_type: string;
	/** The size of the builder volume in gb */
	volume_gb: number;
	/** The port periphery will be running on */
	port: number;
	/**
	 * The EC2 ami id to create.
	 * The ami should have the periphery client configured to start on startup,
	 * and should have the necessary github / dockerhub accounts configured
	 */
	ami_id: string;
	/** The subnet id to create the instance in. */
	subnet_id: string;
	/**
	 * The security group ids to attach to the instance.
	 * This should include a security group to allow core inbound access to the periphery port.
	 */
	security_group_ids: string[];
	/** The key pair name to attach to the instance */
	key_pair_name: string;
	/**
	 * Whether to assign the instance a public IP address.
	 * Likely needed for the instance to be able to reach the open internet.
	 */
	assign_public_ip: boolean;
	/**
	 * Whether core should use the public IP address to communicate with periphery on the builder.
	 * If false, core will communicate with the instance using the private IP.
	 */
	use_public_ip: boolean;
	/** Which github accounts (usernames) are available on the AMI */
	github_accounts?: string[];
	/** Which dockerhub accounts (usernames) are available on the AMI */
	docker_accounts?: string[];
}

export interface CloneArgs {
	name: string;
	repo?: string;
	branch?: string;
	on_clone?: SystemCommand;
	on_pull?: SystemCommand;
	github_account?: string;
}

export interface TotalDiskUsage {
	/** Used portion in GB */
	used_gb: number;
	/** Total size in GB */
	total_gb: number;
}

export interface ServerHealth {
	cpu: SeverityLevel;
	mem: SeverityLevel;
	disks: Record<string, SeverityLevel>;
}

export type AuthRequest = 
	| { type: "GetLoginOptions", params: GetLoginOptions }
	| { type: "CreateLocalUser", params: CreateLocalUser }
	| { type: "LoginLocalUser", params: LoginLocalUser }
	| { type: "ExchangeForJwt", params: ExchangeForJwt }
	| { type: "GetUser", params: GetUser };

export type ExecuteRequest = 
	| { type: "PruneContainers", params: PruneDockerContainers }
	| { type: "PruneImages", params: PruneDockerImages }
	| { type: "PruneNetworks", params: PruneDockerNetworks }
	| { type: "Deploy", params: Deploy }
	| { type: "StartContainer", params: StartContainer }
	| { type: "StopContainer", params: StopContainer }
	| { type: "StopAllContainers", params: StopAllContainers }
	| { type: "RemoveContainer", params: RemoveContainer }
	| { type: "RunBuild", params: RunBuild }
	| { type: "CancelBuild", params: CancelBuild }
	| { type: "CloneRepo", params: CloneRepo }
	| { type: "PullRepo", params: PullRepo }
	| { type: "RunProcedure", params: RunProcedure };

export type ReadRequest = 
	| { type: "GetVersion", params: GetVersion }
	| { type: "GetCoreInfo", params: GetCoreInfo }
	| { type: "GetUsers", params: GetUsers }
	| { type: "GetUsername", params: GetUsername }
	| { type: "ListApiKeys", params: ListApiKeys }
	| { type: "ListUserPermissions", params: ListUserPermissions }
	| { type: "FindResources", params: FindResources }
	| { type: "GetProceduresSummary", params: GetProceduresSummary }
	| { type: "GetProcedure", params: GetProcedure }
	| { type: "GetProcedureActionState", params: GetProcedureActionState }
	| { type: "ListProcedures", params: ListProcedures }
	| { type: "GetServersSummary", params: GetServersSummary }
	| { type: "GetServer", params: GetServer }
	| { type: "ListServers", params: ListServers }
	| { type: "GetServerStatus", params: GetServerStatus }
	| { type: "GetPeripheryVersion", params: GetPeripheryVersion }
	| { type: "GetDockerContainers", params: GetDockerContainers }
	| { type: "GetDockerImages", params: GetDockerImages }
	| { type: "GetDockerNetworks", params: GetDockerNetworks }
	| { type: "GetServerActionState", params: GetServerActionState }
	| { type: "GetHistoricalServerStats", params: GetHistoricalServerStats }
	| { type: "GetAvailableAccounts", params: GetAvailableAccounts }
	| { type: "GetAvailableSecrets", params: GetAvailableSecrets }
	| { type: "GetDeploymentsSummary", params: GetDeploymentsSummary }
	| { type: "GetDeployment", params: GetDeployment }
	| { type: "ListDeployments", params: ListDeployments }
	| { type: "GetDeploymentStatus", params: GetDeploymentStatus }
	| { type: "GetDeploymentActionState", params: GetDeploymentActionState }
	| { type: "GetDeployedVersion", params: GetDeployedVersion }
	| { type: "GetDeploymentStats", params: GetDeploymentStats }
	| { type: "GetLog", params: GetLog }
	| { type: "SearchLog", params: SearchLog }
	| { type: "GetBuildsSummary", params: GetBuildsSummary }
	| { type: "GetBuild", params: GetBuild }
	| { type: "ListBuilds", params: ListBuilds }
	| { type: "GetBuildActionState", params: GetBuildActionState }
	| { type: "GetBuildMonthlyStats", params: GetBuildMonthlyStats }
	| { type: "GetBuildVersions", params: GetBuildVersions }
	| { type: "ListDockerOrganizations", params: ListDockerOrganizations }
	| { type: "GetReposSummary", params: GetReposSummary }
	| { type: "GetRepo", params: GetRepo }
	| { type: "ListRepos", params: ListRepos }
	| { type: "GetRepoActionState", params: GetRepoActionState }
	| { type: "GetBuildersSummary", params: GetBuildersSummary }
	| { type: "GetBuilder", params: GetBuilder }
	| { type: "ListBuilders", params: ListBuilders }
	| { type: "GetBuilderAvailableAccounts", params: GetBuilderAvailableAccounts }
	| { type: "GetAlertersSummary", params: GetAlertersSummary }
	| { type: "GetAlerter", params: GetAlerter }
	| { type: "ListAlerters", params: ListAlerters }
	| { type: "GetTag", params: GetTag }
	| { type: "ListTags", params: ListTags }
	| { type: "GetUpdate", params: GetUpdate }
	| { type: "ListUpdates", params: ListUpdates }
	| { type: "ListAlerts", params: ListAlerts }
	| { type: "GetAlert", params: GetAlert }
	| { type: "GetSystemInformation", params: GetSystemInformation }
	| { type: "GetSystemStats", params: GetSystemStats }
	| { type: "GetSystemProcesses", params: GetSystemProcesses };

export type WriteRequest = 
	| { type: "CreateApiKey", params: CreateApiKey }
	| { type: "DeleteApiKey", params: DeleteApiKey }
	| { type: "CreateApiKeyForServiceUser", params: CreateApiKeyForServiceUser }
	| { type: "DeleteApiKeyForServiceUser", params: DeleteApiKeyForServiceUser }
	| { type: "PushRecentlyViewed", params: PushRecentlyViewed }
	| { type: "SetLastSeenUpdate", params: SetLastSeenUpdate }
	| { type: "CreateServiceUser", params: CreateServiceUser }
	| { type: "UpdateServiceUserDescription", params: UpdateServiceUserDescription }
	| { type: "UpdateUserPerimissions", params: UpdateUserPermissions }
	| { type: "UpdateUserPermissionsOnTarget", params: UpdateUserPermissionsOnTarget }
	| { type: "UpdateDescription", params: UpdateDescription }
	| { type: "LaunchServer", params: LaunchServer }
	| { type: "CreateServer", params: CreateServer }
	| { type: "DeleteServer", params: DeleteServer }
	| { type: "UpdateServer", params: UpdateServer }
	| { type: "RenameServer", params: RenameServer }
	| { type: "CreateNetwork", params: CreateNetwork }
	| { type: "DeleteNetwork", params: DeleteNetwork }
	| { type: "CreateDeployment", params: CreateDeployment }
	| { type: "CopyDeployment", params: CopyDeployment }
	| { type: "DeleteDeployment", params: DeleteDeployment }
	| { type: "UpdateDeployment", params: UpdateDeployment }
	| { type: "RenameDeployment", params: RenameDeployment }
	| { type: "CreateBuild", params: CreateBuild }
	| { type: "CopyBuild", params: CopyBuild }
	| { type: "DeleteBuild", params: DeleteBuild }
	| { type: "UpdateBuild", params: UpdateBuild }
	| { type: "CreateBuilder", params: CreateBuilder }
	| { type: "CopyBuilder", params: CopyBuilder }
	| { type: "DeleteBuilder", params: DeleteBuilder }
	| { type: "UpdateBuilder", params: UpdateBuilder }
	| { type: "CreateRepo", params: CreateRepo }
	| { type: "CopyRepo", params: CopyRepo }
	| { type: "DeleteRepo", params: DeleteRepo }
	| { type: "UpdateRepo", params: UpdateRepo }
	| { type: "CreateAlerter", params: CreateAlerter }
	| { type: "CopyAlerter", params: CopyAlerter }
	| { type: "DeleteAlerter", params: DeleteAlerter }
	| { type: "UpdateAlerter", params: UpdateAlerter }
	| { type: "CreateProcedure", params: CreateProcedure }
	| { type: "CopyProcedure", params: CopyProcedure }
	| { type: "DeleteProcedure", params: DeleteProcedure }
	| { type: "UpdateProcedure", params: UpdateProcedure }
	| { type: "CreateTag", params: CreateTag }
	| { type: "DeleteTag", params: DeleteTag }
	| { type: "RenameTag", params: RenameTag }
	| { type: "UpdateTagsOnResource", params: UpdateTagsOnResource };

export type WsLoginMessage = 
	| { type: "Jwt", params: {
	jwt: string;
}}
	| { type: "ApiKeys", params: {
	key: string;
	secret: string;
}};

